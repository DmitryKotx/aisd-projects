package ru.vsu.cs.course1.tree.demo;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import ru.vsu.cs.util.SwingUtils;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;


public class SubjectFrame extends JFrame {

    private JPanel panel;
    private JTextField subjectsListTextField;
    private JList<String> subjectsList;
    private JList<String> newSibjectsList;
    private JTextField selectedSubjectsListTextField;
    private JButton addNewSubject;
    private JButton deleteSelectedSubject;
    private JButton addSubjects;
    private JSplitPane split;
    private JButton delAllButton;
    private static DefaultListModel<String> subListModel1 = new DefaultListModel<>();
    private static DefaultListModel<String> newSubListModel2 = new DefaultListModel<>();
    private static List<String> subjects = new ArrayList<>();

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel.setPreferredSize(new Dimension(1300, 400));
        panel.setRequestFocusEnabled(true);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        split = new JSplitPane();
        panel1.add(split, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        split.setLeftComponent(panel2);
        subjectsListTextField = new JTextField();
        subjectsListTextField.setEditable(false);
        subjectsListTextField.setText("Список существующих предметов:");
        panel2.add(subjectsListTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        subjectsList = new JList();
        panel2.add(subjectsList, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        split.setRightComponent(panel3);
        selectedSubjectsListTextField = new JTextField();
        selectedSubjectsListTextField.setEditable(false);
        selectedSubjectsListTextField.setText("Выбранные предметы:");
        panel3.add(selectedSubjectsListTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        deleteSelectedSubject = new JButton();
        deleteSelectedSubject.setText("Убрать предмет из списка");
        panel4.add(deleteSelectedSubject, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addNewSubject = new JButton();
        addNewSubject.setText("Добавить новый предмет в список");
        panel4.add(addNewSubject, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addSubjects = new JButton();
        addSubjects.setText("Добавить предметы студенту");
        panel4.add(addSubjects, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        delAllButton = new JButton();
        delAllButton.setText("Очистить список");
        panel4.add(delAllButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newSibjectsList = new JList();
        panel3.add(newSibjectsList, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */



    public SubjectFrame() {
        this.setTitle("Добавление предмета");
        this.setContentPane(panel);
        this.pack();
        subListModel1 = new DefaultListModel<>();
        newSubListModel2 = new DefaultListModel<>();
        subjectsList.setModel(subListModel1);
        newSibjectsList.setModel(newSubListModel2);
        split.setDividerLocation(0.4);
        split.setBorder(null);
        for (String value : StudentsValuesFrame.getStudent().keySet()) {
            for (String sub : StudentsValuesFrame.getStudent().get(value).keySet()) {
                if (!subjects.contains(sub)) {
                    if (!(Objects.equals(sub, "Empty"))) {
                        subjects.add(sub);
                    }
                }
            }
        }

        subListModel1.clear();
        for (String subject : subjects) {
            subListModel1.addElement(subject);
        }

        subjectsList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if (subjectsList.getSelectedValue() != null) {
                    String s = subjectsList.getSelectedValue();
                    if (!newSubListModel2.contains(s)) {
                        newSubListModel2.addElement(s);
                    }
                }
            }
        });
        deleteSelectedSubject.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (newSibjectsList.getSelectedValue() != null) {
                    String s = newSibjectsList.getSelectedValue();
                    newSubListModel2.removeElement(s);
                }
            }
        });
        delAllButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                newSubListModel2.clear();
            }
        });
        addSubjects.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (StudentsValuesFrame.getStudent().get(StudentsValuesFrame.getCur()).containsKey("Empty")) {
                    StudentsValuesFrame.getStudent().get(StudentsValuesFrame.getCur()).remove("Empty", "Empty");
                }
                for (int i = 0; i < newSubListModel2.size(); i++) {
                    if (!StudentsValuesFrame.getStudent().get(StudentsValuesFrame.getCur()).containsKey(newSubListModel2.get(i)))
                        StudentsValuesFrame.getStudent().get(StudentsValuesFrame.getCur()).put(newSubListModel2.get(i), "Null");
                }
                StudentsValuesFrame.reload();
                SubjectFrame.this.dispose();

            }
        });

        addNewSubject.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    JFrame jFrame = new JFrame();
                    JDialog jd = new JDialog(jFrame);
                    jd.setLayout(new FlowLayout());
                    jd.setTitle("Добавить новый предмет");
                    jd.setBounds(500, 300, 400, 150);
                    TextField textField = new TextField(30);
                    JLabel jLabel = new JLabel("Введите название предмета:");
                    textField.addKeyListener(new KeyAdapter() {
                        @Override
                        public void keyPressed(KeyEvent e) {
                            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                                if (!textField.getText().equals("")) {
                                    String s = textField.getText();
                                    SubjectFrame.add(s);
                                    StudentsValuesFrame.reload();
                                    jd.setVisible(false);
                                }
                            }
                        }
                    });

                    jd.add(jLabel);
                    jd.add(textField);
                    jd.setVisible(true);

                } catch (Exception ex) {
                    SwingUtils.showErrorMessageBox(ex);
                }
            }
        });
    }

    public static void add(String s) {
        newSubListModel2.addElement(s);
    }
}
